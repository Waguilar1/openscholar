diff --git a/media_gallery.install b/media_gallery.install
index a633d63..24804e8 100644
--- a/media_gallery.install
+++ b/media_gallery.install
@@ -65,10 +65,10 @@ function media_gallery_install() {
   }
 
   // Add the taxonomy vocabulary for media gallery collections.
-  $vocabulary = media_gallery_create_taxonomy_vocab();
+//  $vocabulary = media_gallery_create_taxonomy_vocab();
 
   // Make sure the standard 'field_tags' field exists.
-  _media_gallery_ensure_field_tags();
+//  _media_gallery_ensure_field_tags();
 
   // Create fields (but not instances yet) for media_gallery nodes and
   // for the gallery collection vocabulary.
@@ -76,13 +76,13 @@ function media_gallery_install() {
     _media_gallery_ensure_field($field);
   }
   // Attach fields to gallery_collection taxonomy terms.
-  foreach (_media_gallery_controlled_instances('taxonomy_term') as $instance) {
-    _media_gallery_ensure_instance($instance);
-  }
+//  foreach (_media_gallery_controlled_instances('taxonomy_term') as $instance) {
+//    _media_gallery_ensure_instance($instance);
+//  }
 
   // Now that the gallery_collection vocabulary exists and has fields attached,
   // create an "All galleries" term for galleries to belong to by default.
-  media_gallery_create_taxonomy_term($vocabulary);
+//  media_gallery_create_taxonomy_term($vocabulary);
 
   // Attach fields to the media gallery node type (including a term reference
   // for the default collection).
@@ -117,7 +117,7 @@ function media_gallery_requirements() {
   $required_fields = _media_gallery_controlled_fields();
   // In addition to the fields we control, we also need the standard field_tags
   // that most sites will have gotten from their install profile.
-  $required_fields['field_tags'] = array('type' => 'taxonomy_term_reference');
+//  $required_fields['field_tags'] = array('type' => 'taxonomy_term_reference');
   
   foreach ($required_fields as $field_name => $field_definition) {
     $field = field_info_field($field_name);
@@ -183,7 +183,7 @@ function _media_gallery_controlled_fields() {
       'field_name' => 'media_gallery_media',
       'cardinality' => FIELD_CARDINALITY_UNLIMITED,
       'locked' => TRUE,
-      'type' => 'media',
+      'type' => 'file',
     ),
     // The gallery description.
     'media_gallery_description' => array(
@@ -276,18 +276,18 @@ function _media_gallery_controlled_fields() {
       'locked' => TRUE,
       'type' => 'number_integer',
     ),
-    'media_gallery_collection' => array(
-      'field_name' => 'media_gallery_collection',
-      'type' => 'taxonomy_term_reference',
-      'settings' => array(
-        'allowed_values' => array(
-          array(
-            'vocabulary' => 'gallery_collections',
-            'parent' => 0,
-          ),
-        ),
-      ),
-    ),
+//    'media_gallery_collection' => array(
+//      'field_name' => 'media_gallery_collection',
+//      'type' => 'taxonomy_term_reference',
+//      'settings' => array(
+//        'allowed_values' => array(
+//          array(
+//            'vocabulary' => 'gallery_collections',
+//            'parent' => 0,
+//          ),
+//        ),
+//      ),
+//    ),
     // Fields to create on media items.
     'media_description' => array(
       'field_name' => 'media_description',
@@ -657,25 +657,25 @@ function _media_gallery_controlled_instances($group = NULL) {
       ),
     ),
     // The 'collection' tag field on media gallery nodes.
-    'media_gallery_collection' => array(
-      'field_name' => 'media_gallery_collection',
-      'label' => $t('Gallery collection'),
-      'default_value' => array(
-        array(
-          'tid' => variable_get('media_gallery_default_collection_tid'),
-        ),
-      ),
-      'display' => array(
-        'default' => array(
-          'type' => 'hidden',
-          'label' => 'hidden',
-        ),
-        'teaser' => array(
-          'type' => 'hidden',
-          'label' => 'hidden',
-        ),
-      ),
-    ),
+//    'media_gallery_collection' => array(
+//      'field_name' => 'media_gallery_collection',
+//      'label' => $t('Gallery collection'),
+//      'default_value' => array(
+//        array(
+//          'tid' => variable_get('media_gallery_default_collection_tid'),
+//        ),
+//      ),
+//      'display' => array(
+//        'default' => array(
+//          'type' => 'hidden',
+//          'label' => 'hidden',
+//        ),
+//        'teaser' => array(
+//          'type' => 'hidden',
+//          'label' => 'hidden',
+//        ),
+//      ),
+//    ),
   );
   foreach ($node_instances as &$instance) {
     $instance['entity_type'] = 'node';
@@ -706,23 +706,24 @@ function _media_gallery_controlled_instances($group = NULL) {
     ),
   );
 
-  foreach ($instances as $key => $instance) {
-    // Since we are re-using fields which are defined for the node, we need to
-    // remove any additional view modes which don't belong to avoid E_NOTICE errors.
-    $instance['display'] = array_intersect_key($instance['display'], array_flip(array('default', 'full')));
-    $instance['entity_type'] = 'taxonomy_term';
-    $instance['bundle'] = 'gallery_collections';
-    $taxonomy_instances['taxo_term_' . $key] = $instance;
-  }
-
-  switch ($group) {
-    case 'node':
-      return $node_instances;
-    case 'taxonomy_term':
-      return $taxonomy_instances;
-    default:
-      return $node_instances + $taxonomy_instances;
-  }
+//  foreach ($instances as $key => $instance) {
+//    // Since we are re-using fields which are defined for the node, we need to
+//    // remove any additional view modes which don't belong to avoid E_NOTICE errors.
+//    $instance['display'] = array_intersect_key($instance['display'], array_flip(array('default', 'full')));
+//    $instance['entity_type'] = 'taxonomy_term';
+//    $instance['bundle'] = 'gallery_collections';
+//    $taxonomy_instances['taxo_term_' . $key] = $instance;
+//  }
+
+//  switch ($group) {
+//    case 'node':
+//      return $node_instances;
+//    case 'taxonomy_term':
+//      return $taxonomy_instances;
+//    default:
+//      return $node_instances + $taxonomy_instances;
+//  }
+  return $node_instances;
 }
 
 /**
@@ -781,7 +782,7 @@ function _media_required_instances() {
         'media_gallery_detail' => array('type' => 'text_default', 'label' => 'above'),
       ),
     ),
-    'field_tags' => array(
+/*    'field_tags' => array(
       'field_name' => 'field_tags',
       'label' => $t('Tags'),
       'widget' => array(
@@ -791,6 +792,7 @@ function _media_required_instances() {
         'default' => array('type' => 'hidden'),
       ),
     ),
+*/    
     'field_license' => array(
       'field_name' => 'field_license',
       'label' => $t('License settings for this media'),
@@ -988,7 +990,7 @@ function media_gallery_update_7000() {
     field_update_instance( array(
         'field_name' => 'media_description',
         'bundle' => $bundle,
-        'entity_type' => 'media',
+        'entity_type' => 'file',
         'display' => array(
           'default' => array('type' => 'text_default', 'label' => 'above'),
           'media_gallery_thumbnail' => array('type' => 'text_default', 'label' => 'above'),
@@ -1068,14 +1070,14 @@ function media_gallery_update_7001() {
 function media_gallery_update_7002() {
   drupal_load('module', 'field');
   $bundle = 'video';
-  $bundle_settings = field_bundle_settings('media', $bundle);
+  $bundle_settings = field_bundle_settings('file', $bundle);
   $bundle_settings['view_modes']['media_gallery_thumbnail']['custom_settings'] = TRUE;
   $bundle_settings['view_modes']['media_gallery_lightbox']['custom_settings'] = TRUE;
   $bundle_settings['view_modes']['media_gallery_detail']['custom_settings'] = TRUE;
   $bundle_settings['view_modes']['media_gallery_block_thumbnail']['custom_settings'] = TRUE;
   $bundle_settings['view_modes']['media_gallery_collection_thumbnail']['custom_settings'] = TRUE;
-  field_bundle_settings('media', $bundle, $bundle_settings);
-  $instance = field_info_instance('media', 'file', $bundle);
+  field_bundle_settings('file', $bundle, $bundle_settings);
+  $instance = field_info_instance('file', 'file', $bundle);
   $instance['display']['media_gallery_thumbnail'] = array('type' => 'styles_file_media_gallery_thumbnail', 'label' => 'hidden');
   $instance['display']['media_gallery_lightbox'] = array('type' => 'styles_file_media_gallery_large', 'label' => 'hidden');
   $instance['display']['media_gallery_detail'] = array('type' => 'styles_file_media_gallery_large', 'label' => 'hidden');
@@ -1105,7 +1107,7 @@ function media_gallery_update_7004() {
   drupal_load('module', 'media');
   $t = get_t();
   foreach (media_type_get_types() as $bundle => $type) {
-    $instance = field_info_instance('media', 'field_license', $bundle);
+    $instance = field_info_instance('file', 'field_license', $bundle);
     // If the instance doesn't exist, we can't update it.
     if ($instance) {
       $label = in_array($bundle, array('image', 'audio', 'video')) ? $bundle : 'file';
@@ -1133,7 +1135,7 @@ function media_gallery_update_7005() {
   }
 
   // Ensure that media videos have the proper display formatters
-  $instance = field_info_instance('media', 'file', 'video');
+  $instance = field_info_instance('file', 'file', 'video');
   if ($instance) {
     $instance['display']['media_gallery_thumbnail'] = array('type' => 'styles_file_media_gallery_thumbnail', 'label' => 'hidden');
     $instance['display']['media_gallery_lightbox'] = array('type' => 'styles_file_media_gallery_large', 'label' => 'hidden');
@@ -1245,7 +1247,7 @@ function media_gallery_update_7007() {
 function media_gallery_update_7008() {
   // Ensure that the media_description field is filtered text.
   foreach (array('video', 'image') as $bundle) {
-    $instance = field_info_instance('media', 'media_description', $bundle);
+    $instance = field_info_instance('file', 'media_description', $bundle);
     if ($instance) {
       $instance['settings']['text_processing'] = 1;
       field_update_instance($instance);
@@ -1265,7 +1267,7 @@ function media_gallery_update_7008() {
  */
 function media_gallery_update_7009() {
   $instances = array();
-  $fields = field_read_fields(array('type' => 'media'), array('include_inactive' => TRUE));
+  $fields = field_read_fields(array('type' => 'file'), array('include_inactive' => TRUE));
   foreach ($fields as $field) {
     $instances = array_merge($instances, field_read_instances(array('field_id' => $field['id']), array('include_inactive' => TRUE)));
   }
diff --git a/media_gallery.module b/media_gallery.module
index 3cfd909..4570b7e 100644
--- a/media_gallery.module
+++ b/media_gallery.module
@@ -27,7 +27,7 @@ function media_gallery_file_view_modes() {
     'media_gallery_lightbox' => t('Gallery lightbox'),
     'media_gallery_detail' => t('Gallery detail'),
     'media_gallery_block_thumbnail' => t('Gallery block thumbnail'),
-    'media_gallery_collection_thumbnail' => t('Gallery collection thumbnail'),
+//    'media_gallery_collection_thumbnail' => t('Gallery collection thumbnail'),
   );
 }
 
@@ -135,6 +135,7 @@ function media_gallery_menu() {
 /**
  * Implements hook_menu_alter().
  */
+/*
 function media_gallery_menu_alter(&$items) {
   // Take over taxonomy term list pages by substituting our own callback.
   // TODO: Use hook_entity_info_alter() to change the entity uri callback for
@@ -150,7 +151,7 @@ function media_gallery_menu_alter(&$items) {
   // @todo Perhaps this should be changed in the media module itself?
   $items['media/%file/delete']['context'] = MENU_CONTEXT_PAGE;
 }
-
+*/
 /**
  * Implements hook_admin_paths().
  */
