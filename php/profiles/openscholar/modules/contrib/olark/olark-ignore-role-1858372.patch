diff --git a/modules/contrib/olark/olark.module b/modules/contrib/olark/olark.module
index ff68b0b..027524d 100644
--- a/modules/contrib/olark/olark.module
+++ b/modules/contrib/olark/olark.module
@@ -23,26 +23,63 @@ function olark_menu() {
 }
 
 /**
+ * Method which checks whether or not current user contains a role which would restrict display of Olark Chat
+ *
+ * @return Bool TRUE if user can view Olark Chat. FALSE if user is prevented from seeing Olark Chat
+ */
+function olark_check_role_access() {
+  // Check to see if current user has access to view Olark Chat.
+  global $user;
+  // Create a bool with value set to TRUE for if statement down below on whether to display Olark Chat.
+  $display_olark_chat = TRUE;
+  // Obtain the list from the settings page, and call array_unique to remove duplicate 0's, and obtain only the array_values.
+  $olark_ignore_user_roles = array_unique(variable_get('olark_ignore_user_roles', array()));
+  if (count($olark_ignore_user_roles) > 0) {
+  	$olark_ignore_user_roles = array_flip($olark_ignore_user_roles);
+  	// Check to see if key 0 is set, which is not a rid, but a result of array_unique.
+  	if (isset($olark_ignore_user_roles[0])) {
+  	  // Unset the key to reduce load on foreach.
+  	  unset($olark_ignore_user_roles[0]);
+  	}
+	// Check to make sure that there is at least one rid that should be ignored to save resources.
+	// Access all of the user roles to see if one of their roles in is in the disallowed list.
+	foreach ($user->roles as $rid=>$role) {
+	  if (in_array($rid, $olark_ignore_user_roles)) {
+	    // An rid that should ignore Olark Chat has been found. Setting bool to FALSE and breaking out.
+		$display_olark_chat = FALSE;
+		break;
+	  }
+	}
+  }
+  //return the result
+  return $display_olark_chat;
+}
+
+
+/**
  * Implements hook_footer().
  */
 function olark_page_alter(&$page) {
   // Note that the 'olark_enable' variable can be (un)set in
   // the $conf array in settings.php, or by another module to enable/disable
   // however, there is not a user interface for this variable.
-  if (variable_get('olark_enable', 1)) {
-    if (!variable_get('olark_context', 0)) {
-      olark_add_js();
-      $page['page_bottom']['tns']['#markup'] = variable_get('olark_code', '');
-    }
-    else {
-      if ($plugin = context_get_plugin('reaction', 'olark_add')) {
-        if ($plugin->execute()) {
-          olark_add_js();
-          $page['page_bottom']['tns']['#markup'] = variable_get('olark_code', '');
-        }
-      }
-    }
+  $role_display_olark_chat = olark_check_role_access();
+  // If the display olark chat AND the variable for olark enable is true, then display Olark Chat.
+  if ($role_display_olark_chat && variable_get('olark_enable', 1)) {
+	if (!variable_get('olark_context', 0)) {
+	  olark_add_js();
+	  $page['page_bottom']['tns']['#markup'] = variable_get('olark_code', '');
+	}
+	else {
+	  if ($plugin = context_get_plugin('reaction', 'olark_add')) {
+		if ($plugin->execute()) {
+		  olark_add_js();
+		  $page['page_bottom']['tns']['#markup'] = variable_get('olark_code', '');
+		}
+	  }
+	}
   }
+
 }
 
 /**
@@ -90,6 +127,7 @@ function olark_context_plugins() {
  * Settings form.
  */
 function olark_settings($form, &$form_state) {
+  $olark_roles_options = user_roles();
   $form = array();
   $form['olark_code'] = array(
     '#type' => 'textarea',
@@ -111,6 +149,13 @@ function olark_settings($form, &$form_state) {
       '#default_value' => variable_get('olark_context', 0),
     );
   }
+  $form['olark_ignore_user_roles'] = array(
+  	'#type' => 'checkboxes',
+  	'#title' => t('User roles that will not display Olark Chat'),
+  	'#description' => t('Certain roles may exist, such as the administrator role, that you do not wish Olark Chat to display. Use these checkboxes to select possible roles that will prevent Olark Chat from loading'),
+  	'#default_value' => variable_get('olark_ignore_user_roles', array()),
+  	'#options' => $olark_roles_options,
+  );
   return system_settings_form($form);
 }
 
