<?php

/**
 * @file os_migrate.install
 */

function os_migrate_install() {
  //migrate will be importing long urls into file->uri.  update db schema to store urls.

  //make sure we haven't already updated
  $schema = drupal_get_schema('file_managed');
  if ($schema['fields']['uri']['type'] != 'text') {

    //store old data.
    $query = db_select('file_managed', 'fm')->fields('fm', array('fid','uri'));
    $results = $query->execute();

    //db_change_field() doesn't support varchar -> text, so drop the original
    db_drop_field('file_managed', 'uri');
    db_add_field('file_managed', 'uri', array('type'=>'text', 'description'=>'The URI to access the file (either local or remote).'));

    //and restore the data
    foreach($results as $row) {
      db_update('file_managed')
        ->fields(array('uri' => $row->uri))
        ->condition('fid', $row->fid, '=')
        ->execute();
    }
  }

  //OS adds it's own file handler that extends the default, so do not use the default
  $disabled[] = 'MigrateFileFieldHandler';
  $disabled[] = 'MigrateImageFieldHandler';
  variable_set('migrate_disabled_handlers', serialize($disabled));
}


/**
 * Implementation of hook_schema().
 */
function os_migrate_schema() {
  //some migrations will need temporary tables to stash data that's between formats.  track them here.
  $schema['os_migrate_special_tables'] = array(
    'description' => 'List special case tables that have been migrated',
    'fields' => array(
      'name' => array(
        'description' => 'Name of this special case',
        'type' => 'varchar',
        'length' => 255,
        // Primary keys are implicitly not null.
        'not null' => TRUE,
        'unique' => TRUE,
      ),
      'src' => array(
        'description' => 'Legacy database table',
        'type' => 'varchar',
        'length' => 255,
      ),
      'dst' => array(
        'description' => 'New table for storing temp data',
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array('name'),
  );

  //store vid/delta/inline html os_migrate_body_inline_objects
  $schema['os_migrate_body_inline_objects'] = array(
    'description' => 'Temp table for migrating node bodies.  Holds different inline html values, associates with vid.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary ID',
      ),
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Node: Revision ID',
      ),
      'html' => array(
        'type' => 'text',
        'description' => 'HTML representation of embedded object',
      )
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_enable
 */
function os_migrate_enable() {
  os_migrate_register_migrations();
}

//separate function so we can reregister if needed
function os_migrate_register_migrations() {
  _registerFlagMigrations();

  foreach (node_type_get_names() as $bundle => $value) {
    // Register a dynamic migration.
    Migration::registerMigration('OsOgVocabMigrate', 'OsOgVocabMigrate' . ucfirst($bundle), array('bundle' => $bundle));
  }
}

//regsiter flag migrations for list of flags
function _registerFlagMigrations() {
  if(!db_table_exists('flags')){
    return;
  }

  $migrate_flags = array('dash'=>'sword_dash', 'repec'=>'service_repec', 'googlescholar'=>'googlescholar');

  foreach ($migrate_flags as $name => $legacy_name) {
    $fid = db_select('flags', 'f')
    ->condition('name', $name)
    ->fields('f', array('fid'))
    ->execute()
    ->fetchColumn();

    $legacy_fid = OSMigration::d6_db_select('flags', 'f')
    ->condition('name', $legacy_name)
    ->fields('f', array('fid'))
    ->execute()
    ->fetchColumn();

    $args = array(
      'fid' => $fid,
      'legacy_fid' => $legacy_fid,
    );

    Migration::registerMigration('FlagOSMigrate', 'flagosmigrate'.$fid, $args);
  }
}